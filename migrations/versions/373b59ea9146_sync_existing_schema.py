"""sync existing schema

Revision ID: 373b59ea9146
Revises: b87bb612551e
Create Date: 2025-08-31 11:42:55.449807

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '373b59ea9146'
down_revision = 'b87bb612551e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('credit_usage')
    op.drop_table('credit_transaction')
    op.drop_table('query_analytics')
    op.drop_table('credit_points')
    op.drop_table('query_keyword')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('company_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.alter_column('company_name',
               existing_type=sa.VARCHAR(),
               nullable=True)

    op.create_table('query_keyword',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('keyword', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('relevance_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('query_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['query_id'], ['query_analytics.id'], name='query_keyword_query_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='query_keyword_pkey')
    )
    op.create_table('credit_points',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='credit_points_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='credit_points_pkey')
    )
    op.create_table('query_analytics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('query_text', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='query_analytics_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='query_analytics_pkey')
    )
    op.create_table('credit_transaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('transaction_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='credit_transaction_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='credit_transaction_pkey'),
    sa.UniqueConstraint('reference', name='credit_transaction_reference_key')
    )
    op.create_table('credit_usage',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('service_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_refunded', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('refunded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='credit_usage_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='credit_usage_pkey')
    )
    # ### end Alembic commands ###
